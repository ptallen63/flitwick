{"version":3,"sources":["parseMatchToArray.js"],"names":["array","matchField","_typeof","matchFieldPosition","Error","err","console","log","complete","incomplete","width","bar","length","newObject","fields","forEach","record","field","push","trim","f","obj","count","tick","fieldsObj","e","matched","_chalk2","default","green","_progress","require","_chalk"],"mappings":"kXAIe,SAAUA,EAAOC,GAC9B,GAAqB,YAAjB,mBAAOD,GAAP,YAAAE,QAAOF,IACT,OAAO,CAGT,IAAMG,GALiBH,EAAOC,GAAAA,QAAjBA,EACb,KACE,GAAAE,KAAA,EAAA,KAAA,IAAAC,OAAA,yBACD,MAAAC,GAGD,MADAC,SAAMH,IAAAA,IACF,EAIFG,GAAAA,GAAQC,GAAAA,YAAAA,QAAR,gDAEDC,SAAA,IAMGC,WAAY,IAJhBC,MAAA,GACMC,MAAMX,EAAAY,SAAZC,KAWMC,IAENd,GAAMe,QAAQ,SAACC,GAHf,GAAMH,IAAYb,EAAlB,GACMc,EAAAA,GAASC,QAAf,SAAAE,GAAA,MAAAH,GAAAI,KAAAD,EAAAE,cAKS,CAHTnB,GAAMe,MACAC,EAAAA,CACFhB,GAAAe,QAASA,SAATK,GAAiBC,EAAAP,EAASA,IAAYG,EAAtCK,GAAA,GAGA,IAAIA,GAAAA,EAAJrB,EACAe,KACEK,EAAIP,GAAOQ,GASfX,EAAIY,QAJF,IAAAC,KAQFA,OAPIX,GAAAA,QAAAA,SAAUY,GACXD,EAAAJ,GAAA,OAEHT,EAAAe,QAAA,KAEIF,EAAAA,UAANlB,QAAAC,IAAAoB,QAAAC,QAAAC,MAAA,4EAEEL,KAAAX,EAAAC,OAAAU,GAnDJ,IAAAM,WAAAC,QAAA,yDACAC,OAAAD,QAAA","file":"parseMatchToArray.js","sourcesContent":["/* eslint-disable no-console */\nimport ProgressBar from 'progress';\nimport chalk from 'chalk';\n\nexport default function (array, matchField) {\n  if (typeof array !== 'object') {\n    return -1;\n  }\n\n  const matchFieldPosition = array[0].indexOf(matchField);\n  try {\n    if (matchFieldPosition === -1) throw new Error('Match Field not Found');\n  } catch (err) {\n    /* eslint-disable no-console */\n    console.log(err);\n    return -1;\n  }\n\n  // Set up progress Bar\n  const bar = new ProgressBar('   Parsing the Match to list [:bar] :percent',\n    {\n      complete: '=',\n      incomplete: ' ',\n      width: 30,\n      total: array.length,\n    });\n\n  // Get Fields position\n\n  const newObject = {};\n  const fields = [];\n\n  array.forEach((record) => {\n    if (record === array[0]) {\n      array[0].forEach(field => fields.push(field.trim()));\n    } else {\n      const obj = {};\n      let count = 0;\n      record.forEach((f) => {\n        obj[fields[count]] = f;\n        count += 1;\n      });\n\n      const e = obj[matchField];\n      if (e) {\n        newObject[e] = obj;\n      }\n    }\n    bar.tick();\n  });\n  const fieldsObj = {};\n  fields.forEach((f) => {\n    fieldsObj[f] = null;\n  });\n  fieldsObj.matched = null;\n\n  if (bar.complete) { console.log(chalk.green('  \\u2713 Match to list parsed! ... Time to go to charms with first years \\n')); }\n\n  return { data: newObject, fields: fieldsObj };\n}\n"]}