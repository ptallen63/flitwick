{"version":3,"sources":["index.js"],"names":["_babyparse","require","_chalk","_outputToFile","_parseMatchListArray","_parseMatchToArray","_generateNewList","_parseConfig","_getMatchedTotal","_displayArt","success","_chalk2","default","green","flitwick","matchListPath","matchToListPath","matchField","_displayArt2","console","log","process","exit","matchListParse","_babyparse2","parseFiles","_parseConfig2","matchToListParse","matchArray","_parseMatchListArray2","data","matchToObject","_parseMatchToArray2","matchToFields","fields","matchToData","newList","_generateNewList2","unparse","_outputToFile2","csv","matched","_getMatchedTotal2"],"mappings":"2IACA,IAAAA,YAAAC,QAAA,4DACAC,OAAAD,QAAA,gDAGAE,cAAAF,QAAA,uEAJAG,qBAAAH,QAAA,4FAMAI,mBAAAJ,QAAA,sFACAK,iBAAAL,QAAA,gFACAM,aAAAN,QAAA,oEAPAO,iBAAAP,QAAA,gFASAQ,YAAAR,QAAA,iEAEMS,QAAUC,QAAAC,QAAMC,MAPtBC,SAAA,SAAAC,EAAAC,EAAAC,IAcE,EAAAC,aAAAN,WAGKG,IAAiBI,QAAQC,IAAI,0BAA2BC,QAAQC,QAChEN,IAAmBG,QAAQC,IAAI,6BAA8BC,QAAQC,QACrEL,IAAcE,QAAQC,IAAI,2BAA4BC,QAAQC,OAInE,IAAMC,GAAiBC,YAAAZ,QAAKa,WAAWV,GAAeW,cAAAd,UApBxDe,EAAAH,YAAAZ,QAAAa,WAAAT,GAAAU,cAAAd,UAwBQgB,GAAa,EAAAC,sBAAAjB,SAAoBW,EAAeO,KAAMb,GAvB9Dc,GAAA,EAAAC,oBAAApB,SAAAe,EAAAG,KAAAb,GA2BQgB,EAAgBF,EAAcG,OA1BtCC,EAAAJ,EAAAD,KA8BQM,GAAU,EAAAC,kBAAAzB,SAAgBgB,EAAYO,EAAaF,EAAehB,GA5BpEP,EAAUc,YAAAZ,QAAA0B,QAAAF,IAkCd,EAAAG,eAAA3B,SAAa4B,EA3Cf,IAAAC,IAAA,EAAAC,kBAAA9B,SAAAwB,EAeEjB,SAAAC,IAAAV,QAAAA,MAAA+B,EAAA,qBACAtB,QAAAC,IAAAT,QAAAC,QAAAC,MAAA,+BAoCAM,QAAQC,IAAIT,QAAAC,QAAMC,MAAM,6DAjCFC","file":"index.js","sourcesContent":["/* eslint-disable no-console */\nimport Baby from 'babyparse';\nimport chalk from 'chalk';\n\n// Functions\nimport outputToFile from './outputToFile';\nimport parseMatchListArray from './parseMatchListArray';\nimport parseMatchToArray from './parseMatchToArray';\nimport generateNewList from './generateNewList';\nimport parseConfig from './parseConfig';\nimport getMatchedTotal from './getMatchedTotal';\nimport displayArt from './displayArt';\n\nconst success = chalk.green;\n// const error = chalk.red.bold;\n// const info = chalk.blue.bold;\n\n//  Get Files\nconst flitwick = (matchListPath, matchToListPath, matchField) => {\n  // Show title\n  displayArt();\n\n  // Check\n  if (!matchListPath) { console.log('No match list argument'); process.exit(); }\n  if (!matchToListPath) { console.log('No match to list argument'); process.exit(); }\n  if (!matchField) { console.log('No match field argument'); process.exit(); }\n\n\n  // parse files\n  const matchListParse = Baby.parseFiles(matchListPath, [parseConfig]);\n  const matchToListParse = Baby.parseFiles(matchToListPath, [parseConfig]);\n\n  // parse data\n  const matchArray = parseMatchListArray(matchListParse.data, matchField);\n  const matchToObject = parseMatchToArray(matchToListParse.data, matchField);\n\n  // Set matchTo data\n  const matchToFields = matchToObject.fields;\n  const matchToData = matchToObject.data;\n\n  // Generate New List\n  const newList = generateNewList(matchArray, matchToData, matchToFields, matchField);\n\n  // Parse back to csv\n  const csv = Baby.unparse(newList);\n\n  // Write to File\n  outputToFile(csv);\n\n\n  // Wite some stats\n  const matched = getMatchedTotal(newList);\n\n\n  console.log(success(`   ${matched} records matched`));\n  console.log(chalk.green('   Created output.csv file'));\n  console.log(chalk.green('   \\n Thank You for using FlitwickJS \\n'));\n};\n\nexport default flitwick;\n"]}